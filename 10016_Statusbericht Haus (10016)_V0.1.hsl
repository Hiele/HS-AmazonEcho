# -*- coding: iso8859-1 -*-
## -----------------------------------------------------
## Statusbericht Haus (10016)   ### V0.1
##
## erstellt am: 2017-02-05 09:09
## -----------------------------------------------------
## Copyright © 2016, Werner Lindbüchl, All rights reserved.
##
## This program is free software; you can redistribute it and/or modify it under the terms
## of the GNU General Public License as published by the Free Software Foundation; either
## version 3 of the License, or (at your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
## without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
## See the GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License along with this program;
## if not, see <http://www.gnu.de/documents/gpl-3.0.de.html>.

## -- 
## --  

#5000|"Text"|Remanent(1/0)|Anz.Eingänge|.n.|Anzahl Ausgänge|.n.|.n.
5000|"Weitere Bausteine\Statusbericht Haus (10016)_V0.1"|0|9|"E1 Anz. Räume Lichter an"|"E2 Liste Räume Lichter an"|"E3 E1>E3 ? => E1 sonst E2 in Gesamt"|"E4 Anz. Räume Fenster offen"|"E5 Liste Räume Fenster offen"|"E6 E4>E6 ? => E4 sonst E5 in Gesamt"|"E7 Anz. Räume Türen offen"|"E8 Liste Räume Türen offen"|"E9 E7>E9 ? => E7 sonst E8 in Gesamt"|3|"A1 Gesamt"|"A2 Beleuchtung"|"A3 Tür/Fenster"|"V0.1"

#5001|Anzahl Eingänge|Ausgänge|Offset|Speicher|Berechnung bei Start
# 4 Eingänge, 4 Ausgänge, 0 Timer, 0 Speicher, Berechnung bei Initialisierung 
5001|9|3|0|1|1    

#5002|Index Eingang|Default Wert|0=numerisch 1=alphanummerisch
5002|1||0          # Eingang 1, Anz. Lichter an
5002|2||1          # Eingang 2, Liste der Räume in denen Licht brennt
5002|3|3|0         # Eingang 3, E1>E3 ? => E1 sonst E2 in Gesamt 
5002|4||0          # Eingang 4, Anz. Fenster offen
5002|5||1          # Eingang 5, Liste der Räume in denen ein Fenster offen ist
5002|6|3|0         # Eingang 6, E4>E6 ? => E4 sonst E5 in Gesamt 
5002|7||0          # Eingang 7, Anz. Türen offen
5002|8||1          # Eingang 8, Liste der Räume in denen eine Tür offen ist
5002|9|3|0         # Eingang 9, E7>E9 ? => E7 sonst E8 in Gesamt 

#5003|Speicher|Initwert|Remanent
5003|1||0            # Klasse 

#5004|ausgang|Initwert|runden binär (0/1)|typ (1-send/2-sbc)|0=numerisch 1=alphanummerisch
5004|1|""|0|1|1      # Ausgang 1, Gesamt
5004|2|""|0|1|1      # Ausgang 2, Beleuchtung
5004|3|""|0|1|1      # Ausgang 3, Tür/Fenster

#################################################

5012|0|"EI"|"eval(compile(__import__('base64').decodestring(''),'<10016_Statusbericht Haus (10016)>','exec'))"|""|0|0|0|0
## MD5 der Formelzeile: a3689ee8b29e113094321c3fa3470250
##########################
###### Quelltext: ########
##########################
#### Klasse Statusbericht
##if EI==1:
##
##  class Statusbericht:
##    HS = True
##    LOG_LEVEL = 0
##    PATH_BASE = None
##    
##### INIT
##    def __init__(self, locals):
##      self.locals = locals;
##      self.logik = locals['pItem']
##      self.MC = self.logik.MC
##
##      self.AN = locals['AN']
##      self.En = self.En(locals['EN'], self)
##
##      if self.HS:
##        self.PATH_BASE = "/tmp/"
##      else:
##        self.PATH_BASE = ""
##      
##      if self.LOG_LEVEL > 0:
##        self.logFile = open(self.PATH_BASE + "10016.log", "a+")
##        self.logFile.seek(0)
##        self.log('V0.1 vom 05.02.2017 09:09')
##        
##      self.buildStatusTexte()
##        
##    MSG = {
##      u"PREFIX":"Statusbericht{0}",
##      u"BELEUCHTUNG":" zur Beleuchtung",
##      u"OEFFNUNGSMELDER":" der Öffnungsmelder",
##      
##      u"0_LICHTER_AN":"alle Lichter sind ausgeschaltet",
##      u"1_LICHTER_AN":"in einem Raum ist das Licht eingeschaltet",
##      u"X_LICHTER_AN":"in {0:0.0f} Räumen ist das Licht eingeschaltet",
##      u"L1_LICHTER_AN":"im Raum {0} ist das Licht eingeschaltet",
##      u"LX_LICHTER_AN":"in den Räumen {0} ist das Licht eingeschaltet",
##      
##      u"ALLE_TUEREN_FENSTER_ZU":"alle Türen und Fenster sind geschlossen",
##      
##      u"0_TUEREN_OFFEN":"alle Türen sind geschlossen",
##      u"1_TUEREN_OFFEN":"in einem Raum ist eine Tür geöffnet",
##      u"X_TUEREN_OFFEN":"in {0:0.0f} Räumen ist eine Tür geöffnet",
##      u"L1_TUEREN_OFFEN":"im Raum {0} ist eine Tür geöffnet",
##      u"LX_TUEREN_OFFEN":"in den Räumen {0} ist eine Tür geöffnet",
##      
##      u"0_FENSTER_OFFEN":"alle Fenster sind geschlossen",
##      u"1_FENSTER_OFFEN":"in einem Raum ist ein Fenster geöffnet",
##      u"X_FENSTER_OFFEN":"in {0:0.0f} Räumen ist ein Fenster geöffnet",
##      u"L1_FENSTER_OFFEN":"im Raum {0} ist ein Fenster geöffnet",
##      u"LX_FENSTER_OFFEN":"in den Räumen {0} ist ein Fenster geöffnet",
##    }
##    
##    def buildStatus(self, value, list, section):
##      MSG = self.MSG
##      
##      anzMsg = None
##      listMsg = None
##      if value is not None:
##        if value > 0:
##          if value == 1:
##            anzMsg = MSG["1_" + section]
##          else:
##            anzMsg = MSG["X_" + section].format(value)
##            
##          if list is not None and list != "":
##            if value == 1:
##              listMsg = MSG["L1_" + section].format(list)
##            else:
##              listMsg = MSG["LX_" + section].format(list)
##          
##        else:
##          anzMsg = MSG["0_" + section]
##    
##      return anzMsg, listMsg
##      
##    def buildStatusTexte(self):
##      En = self.En
##      MSG = self.MSG
##
##      # Lichtstatus
##      anzLichterAnMsg, listLichterAnMsg = self.buildStatus(En.getAnzLichterAn(), En.getListLichterAn(), "LICHTER_AN")
##        
##      # Fensterstatus
##      anzFensterOffenMsg, listFensterOffenMsg = self.buildStatus(En.getAnzFensterOffen(), En.getListFensterOffen(), "FENSTER_OFFEN")
##      
##      # Türstatus
##      anzTuerenOffenMsg, listTuerenOffenMsg = self.buildStatus(En.getAnzTuerenOffen(), En.getListTuerenOffen(), "TUEREN_OFFEN")
##
##      # Tür und Fensterstatus zusammenfassen
##      alleTuerenFensterZu = False
##      if (anzFensterOffenMsg is not None and anzTuerenOffenMsg is not None and
##          anzFensterOffenMsg == MSG["0_FENSTER_OFFEN"] and anzTuerenOffenMsg == MSG["0_TUEREN_OFFEN"]):
##        alleTuerenFensterZu = True
##
##      ###
##      ### Gesamt
##      ###
##      gesamtMsg = MSG["PREFIX"].format("")
##      
##      if anzLichterAnMsg is not None:
##        if listLichterAnMsg is not None and En.getAnzLichterAn() <= En.getMaxListLichterGesamt():
##          gesamtMsg += ", " + listLichterAnMsg
##        else:          
##          gesamtMsg += ", " + anzLichterAnMsg
##
##      if not alleTuerenFensterZu:
##        if anzFensterOffenMsg is not None:
##          if listFensterOffenMsg is not None and En.getAnzFensterOffen() <= En.getMaxListFensterGesamt():
##            gesamtMsg += ", " + listFensterOffenMsg
##          else:          
##            gesamtMsg += ", " + anzFensterOffenMsg
##
##        if anzTuerenOffenMsg is not None:
##          if listTuerenOffenMsg is not None and En.getAnzTuerenOffen() <= En.getMaxListTuerenGesamt():
##            gesamtMsg += ", " + listTuerenOffenMsg
##          else:          
##            gesamtMsg += ", " + anzTuerenOffenMsg
##
##      else:
##        gesamtMsg += ", " + MSG["ALLE_TUEREN_FENSTER_ZU"]
##        
##      if gesamtMsg != self.AN[1]:
##        self.sendToOutput(1, gesamtMsg)
##
##      ###
##      ### Beleuchtung
##      ###
##      beleuchtungMsg = MSG["PREFIX"].format(MSG["BELEUCHTUNG"])
##      
##      if listLichterAnMsg is not None:
##        beleuchtungMsg += ", " + listLichterAnMsg
##      elif anzLichterAnMsg is not None:
##        beleuchtungMsg += ", " + anzLichterAnMsg
##
##      if beleuchtungMsg != self.AN[2]:
##        self.sendToOutput(2, beleuchtungMsg)
##
##      ###
##      ### Tuer/Fenster
##      ###
##      tuerFensterMsg = MSG["PREFIX"].format(MSG["OEFFNUNGSMELDER"])
##
##      if not alleTuerenFensterZu:
##        if listFensterOffenMsg is not None:
##          tuerFensterMsg += ", " + listFensterOffenMsg
##        elif anzFensterOffenMsg is not None:
##          tuerFensterMsg += ", " + anzFensterOffenMsg
##          
##        if listTuerenOffenMsg is not None:
##          tuerFensterMsg += ", " + listTuerenOffenMsg
##        elif anzTuerenOffenMsg is not None:
##          tuerFensterMsg += ", " + anzTuerenOffenMsg
##
##      else:
##        tuerFensterMsg += ", " + MSG["ALLE_TUEREN_FENSTER_ZU"]
##
##      if tuerFensterMsg != self.AN[3]:
##        self.sendToOutput(3, tuerFensterMsg)
##      
#####
##### LOG
#####
##    def info(self, msg, *params):
##      if self.LOG_LEVEL >= 1:
##        self._log("INFO ", msg, *params)
##
##    def debug(self, msg, *params):
##      if self.LOG_LEVEL >= 2:
##        self._log("DEBUG", msg, *params)
##      
##    def log(self, msg, *params):
##      self._log("SYS  ", msg, *params)
##
##    def _log(self, prefix, msg, *params):
##      import time
##      timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
##
##      if params is not None and len(params) > 0:
##        msg = msg.format(*params)
##        
##      msg = timestamp + " | " + prefix + " | " + msg + '\n'
##      self.logFile.write(msg)
##      self.logFile.flush()
##
#####      
##### HS
#####      
##    def sendToOutput(self, out, value):
##      self.AN[out] = value
##      self.debug("## sendToOutput: " + str(out) + " = '" + str(value) + "'")
##      out -= 1 ## Intern starten die Ausgänge bei 0 und nicht bei 1
##      if self.logik.SendIntervall == 0 or time.time() >= self.logik.Ausgang[out][0]:
##        for iko in self.logik.Ausgang[out][1]:
##          self.logik.MC.TagList.setWert(FLAG_EIB_LOGIK, iko, value)
##        if value:
##          for cmd in self.logik.Ausgang[out][2]:
##            cmd.execBefehl()
##        for con in self.logik.Ausgang[out][3]:
##          self.logik.MC.LogikList.ConnectList.append(con + [ value ])
##        if self.logik.SendIntervall > 0:
##          self.logik.Ausgang[out][0] = time.time() + self.logik.SendIntervall
##        self.logik.OutWert[out] = value
##
#####      
##### EN Wrapper Klasse
#####      
##    class En:
##      def __init__(self, EN, mainClass):
##        self.EN = EN
##        self.mainClass = mainClass
##
##      def returnNoneIfEmptyString(self, value):
##        if value != "":
##          return value
##        else:
##          return None
##      
##      # AnzLichterAn
##      def getAnzLichterAn(self):
##        return self.returnNoneIfEmptyString(self.EN[1])
##
##      def setAnzLichterAn(self, value):
##        self.mainClass.debug("++ setAnzLichterAn(value='{0}')", value)
##        self.EN[1] = value
##
##      # ListLichterAn
##      def getListLichterAn(self):
##        return self.EN[2]
##
##      def setListLichterAn(self, value):
##        self.mainClass.debug("++ setListLichterAn(value='{0}')", value)
##        self.EN[2] = value
##
##      # MaxListLichterGesamt
##      def getMaxListLichterGesamt(self):
##        return self.EN[3]
##
##      def setMaxListLichterGesamt(self, value):
##        self.mainClass.debug("++ setMaxListLichterGesamt(value='{0}')", value)
##        self.EN[3] = value
##
##      # AnzFensterOffen
##      def getAnzFensterOffen(self):
##        return self.returnNoneIfEmptyString(self.EN[4])
##
##      def setAnzFensterOffen(self, value):
##        self.mainClass.debug("++ setAnzTuerenOffen(value='{0}')", value)
##        self.EN[4] = value
##        
##      # ListFensterOffen
##      def getListFensterOffen(self):
##        return self.EN[5]
##
##      def setListFensterOffen(self, value):
##        self.mainClass.debug("++ setListFensterOffen(value='{0}')", value)
##        self.EN[5] = value
##
##      # MaxListFensterGesamt
##      def getMaxListFensterGesamt(self):
##        return self.EN[6]
##
##      def setMaxListFensterGesamt(self, value):
##        self.mainClass.debug("++ setMaxListFensterGesamt(value='{0}')", value)
##        self.EN[6] = value
##        
##      # AnzTuerenOffen
##      def getAnzTuerenOffen(self):
##        return self.returnNoneIfEmptyString(self.EN[7])
##
##      def setAnzTuerenOffen(self, value):
##        self.mainClass.debug("++ setAnzTuerenOffen(value='{0}')", value)
##        self.EN[7] = value
##        
##      # ListTuerenOffen
##      def getListTuerenOffen(self):
##        return self.EN[8]
##
##      def setListTuerenOffen(self, value):
##        self.mainClass.debug("++ setListTuerenOffen(value='{0}')", value)
##        self.EN[8] = value
##
##      # MaxListTuerenGesamt
##      def getMaxListTuerenGesamt(self):
##        return self.EN[9]
##
##      def setMaxListTuerenGesamt(self, value):
##        self.mainClass.debug("++ setMaxListTuerenGesamt(value='{0}')", value)
##        self.EN[9] = value
##
##





## Klasse auf SN1 
#5012|abbruch bei bed. (0/1)|bedingung|formel|zeit|pin-ausgang|pin-offset|pin-speicher|pin-neg.ausgang
5012|1|"EI"|"Statusbericht(locals())"|""|0|0|1|0
5012|0|"EC[1]"|"SN[1].En.setAnzLichterAn(EN[1])"|""|0|0|0|0
5012|0|"EC[2]"|"SN[1].En.setListLichterAn(EN[2])"|""|0|0|0|0
5012|0|"EC[3]"|"SN[1].En.setMaxListLichterGesamt(EN[3])"|""|0|0|0|0
5012|0|"EC[4]"|"SN[1].En.setAnzFensterOffen(EN[4])"|""|0|0|0|0
5012|0|"EC[5]"|"SN[1].En.setListFensterOffen(EN[5])"|""|0|0|0|0
5012|0|"EC[6]"|"SN[1].En.setMaxListFensterGesamt(EN[6])"|""|0|0|0|0
5012|0|"EC[7]"|"SN[1].En.setAnzTuerenOffen(EN[7])"|""|0|0|0|0
5012|0|"EC[8]"|"SN[1].En.setListTuerenOffen(EN[8])"|""|0|0|0|0
5012|0|"EC[9]"|"SN[1].En.setMaxListTuerenGesamt(EN[9])"|""|0|0|0|0
5012|1|"1"|"SN[1].buildStatusTexte()"|""|0|0|0|0


